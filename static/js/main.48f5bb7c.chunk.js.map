{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","img","ingredients","original","className","style","recipe","toFixed","para","map","ingredient","text","to","image","src","alt","require","config","App","APP_ID","process","API_KEY","useState","recipes","setRecipes","search","setSearch","getQuery","setQuery","useEffect","a","fetch","response","json","data","hits","getRecip","onSubmit","e","preventDefault","type","value","onChange","target","key","id","Fragment","label","url","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,KAAO,uB,oLCuBxEC,EApBA,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,MAAOC,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,IAAKC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,SAEhD,OACI,yBAAKC,UAAWC,IAAMC,QAClB,4BAAKP,GACL,wCAAcC,EAASO,QAAQ,IAC/B,yBAAKH,UAAWC,IAAMG,MAAON,EAAYO,IAAI,SAAAC,GAAU,OAC/C,2BAAIA,EAAWC,SAEvB,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAMC,GAAIT,GACV,+CAA4B,+BAG5B,yBAAKC,UAAWC,IAAMQ,MAAOC,IAAKb,EAAKc,IAAI,O,MCfvDC,EAAQ,IAAUC,SAElB,IAyDeC,EAzDH,WAEV,IAAMC,EAAM,UAAKC,YACXC,EAAO,UAAKD,oCAHF,EAKcE,mBAAS,IALvB,mBAKTC,EALS,KAKAC,EALA,OAMYF,mBAAS,IANrB,mBAMTG,EANS,KAMDC,EANC,OAOaJ,mBAAS,UAPtB,mBAOTK,EAPS,KAOCC,EAPD,KAShBC,oBAAU,YACM,sCAAG,8BAAAC,EAAA,qEACQC,MAAM,mCAAD,OAAoCJ,EAApC,mBAAuDR,EAAvD,oBAAyEE,IADtF,cACTW,EADS,gBAEIA,EAASC,OAFb,OAETC,EAFS,OAGfV,EAAWU,EAAKC,MAHD,yCAAH,qDAMdC,IACC,CAACT,IAaJ,OACE,yBAAKvB,UAAU,OACb,0BAAMiC,SARQ,SAAAC,GAChBA,EAAEC,iBACFX,EAASH,GACTC,EAAU,KAKmBtB,UAAU,eACnC,2BAAOA,UAAU,aAAaoC,KAAK,OAAOC,MAAOhB,EAAQiB,SAb7C,SAAAJ,GAChBZ,EAAUY,EAAEK,OAAOF,UAaf,4BAAQrC,UAAU,gBAAgBoC,KAAK,UAAvC,WAEF,yBAAKpC,UAAU,UAAUwC,IAAKrB,EAAQsB,IACrCtB,EAAQd,IAAI,SAAAH,GAAM,OACjB,kBAAC,IAAMwC,SAAP,KACE,kBAAC,EAAD,CACE/C,MAAOO,EAAOA,OAAOyC,MACrB/C,SAAUM,EAAOA,OAAON,SACxBC,IAAKK,EAAOA,OAAOO,MACnBX,YAAaI,EAAOA,OAAOJ,YAC3BC,SAAUG,EAAOA,OAAO0C,YCrChBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.48f5bb7c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\",\"image\":\"recipe_image__BtdIE\",\"para\":\"recipe_para__2mm4m\"};","import React from 'react'\nimport {BrowserRouter, Link} from 'react-router-dom';\nimport style from './recipe.module.css';\n\nconst Recipe = ({title, calories, img, ingredients, original}) => {\n\n    return (\n        <div className={style.recipe} >\n            <h1>{title}</h1>\n            <p>Calories: {calories.toFixed(2)}</p>\n            <div className={style.para}>{ingredients.map(ingredient => (\n                    <p>{ingredient.text}</p>\n                ))}</div>\n            <BrowserRouter>\n            <Link to={original}>    \n            <button>Show Recipe</button><br></br>\n            </Link>\n            </BrowserRouter>\n            <img className={style.image} src={img} alt=\"\"/>\n            \n        </div>\n    );\n};\n\nexport default Recipe;\n","import React, {useEffect, useState} from 'react';\nimport Recipe from './Recipe';\nimport './App.css';\nrequire('dotenv').config();\n\nconst App = () => {\n\n  const APP_ID =`${process.env.REACT_APP_API_ID}`;\n  const API_KEY =`${process.env.REACT_APP_API_KEY}`;\n  \n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [getQuery, setQuery] = useState(\"cherry\");\n\n  useEffect(() => {\n    const getRecip = async () => {\n      const response = await fetch(`https://api.edamam.com/search?q=${getQuery}&app_id=${APP_ID}&app_key=${API_KEY}`);\n      const data = await response.json(); //formats the data into json file\n      setRecipes(data.hits);\n      \n    };\n    getRecip();\n  }, [getQuery]);\n\n\n  const letSearch = e => {\n    setSearch(e.target.value);\n  }\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  }\n\n  return(\n    <div className=\"App\">\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input className=\"search-bar\" type=\"text\" value={search} onChange={letSearch}></input>\n        <button className=\"search-button\" type=\"submit\">Search</button>\n      </form>\n      <div className=\"recipes\" key={recipes.id}>\n      {recipes.map(recipe => (\n        <React.Fragment>\n          <Recipe \n            title={recipe.recipe.label} \n            calories={recipe.recipe.calories} \n            img={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n            original={recipe.recipe.url}\n          />\n         \n\n        </React.Fragment>\n        \n      ))}\n    </div>\n    </div>\n  );\n}\n  \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}